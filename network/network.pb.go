// Code generated by protoc-gen-go. DO NOT EDIT.
// source: network.proto

package network

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MinerInfo struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MinerInfo) Reset()         { *m = MinerInfo{} }
func (m *MinerInfo) String() string { return proto.CompactTextString(m) }
func (*MinerInfo) ProtoMessage()    {}
func (*MinerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{0}
}

func (m *MinerInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MinerInfo.Unmarshal(m, b)
}
func (m *MinerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MinerInfo.Marshal(b, m, deterministic)
}
func (m *MinerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MinerInfo.Merge(m, src)
}
func (m *MinerInfo) XXX_Size() int {
	return xxx_messageInfo_MinerInfo.Size(m)
}
func (m *MinerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MinerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MinerInfo proto.InternalMessageInfo

func (m *MinerInfo) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type ChainInfo struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChainInfo) Reset()         { *m = ChainInfo{} }
func (m *ChainInfo) String() string { return proto.CompactTextString(m) }
func (*ChainInfo) ProtoMessage()    {}
func (*ChainInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{1}
}

func (m *ChainInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChainInfo.Unmarshal(m, b)
}
func (m *ChainInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChainInfo.Marshal(b, m, deterministic)
}
func (m *ChainInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainInfo.Merge(m, src)
}
func (m *ChainInfo) XXX_Size() int {
	return xxx_messageInfo_ChainInfo.Size(m)
}
func (m *ChainInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ChainInfo proto.InternalMessageInfo

func (m *ChainInfo) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Transactions struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Transactions) Reset()         { *m = Transactions{} }
func (m *Transactions) String() string { return proto.CompactTextString(m) }
func (*Transactions) ProtoMessage()    {}
func (*Transactions) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{2}
}

func (m *Transactions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Transactions.Unmarshal(m, b)
}
func (m *Transactions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Transactions.Marshal(b, m, deterministic)
}
func (m *Transactions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transactions.Merge(m, src)
}
func (m *Transactions) XXX_Size() int {
	return xxx_messageInfo_Transactions.Size(m)
}
func (m *Transactions) XXX_DiscardUnknown() {
	xxx_messageInfo_Transactions.DiscardUnknown(m)
}

var xxx_messageInfo_Transactions proto.InternalMessageInfo

func (m *Transactions) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type MiningInfo struct {
	Transactions         []byte   `protobuf:"bytes,1,opt,name=transactions,proto3" json:"transactions,omitempty"`
	Nonce                int64    `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Miner                string   `protobuf:"bytes,3,opt,name=miner,proto3" json:"miner,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MiningInfo) Reset()         { *m = MiningInfo{} }
func (m *MiningInfo) String() string { return proto.CompactTextString(m) }
func (*MiningInfo) ProtoMessage()    {}
func (*MiningInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{3}
}

func (m *MiningInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MiningInfo.Unmarshal(m, b)
}
func (m *MiningInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MiningInfo.Marshal(b, m, deterministic)
}
func (m *MiningInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MiningInfo.Merge(m, src)
}
func (m *MiningInfo) XXX_Size() int {
	return xxx_messageInfo_MiningInfo.Size(m)
}
func (m *MiningInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MiningInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MiningInfo proto.InternalMessageInfo

func (m *MiningInfo) GetTransactions() []byte {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *MiningInfo) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *MiningInfo) GetMiner() string {
	if m != nil {
		return m.Miner
	}
	return ""
}

type Result struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{4}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func init() {
	proto.RegisterType((*MinerInfo)(nil), "network.MinerInfo")
	proto.RegisterType((*ChainInfo)(nil), "network.ChainInfo")
	proto.RegisterType((*Transactions)(nil), "network.Transactions")
	proto.RegisterType((*MiningInfo)(nil), "network.MiningInfo")
	proto.RegisterType((*Result)(nil), "network.Result")
}

func init() { proto.RegisterFile("network.proto", fileDescriptor_8571034d60397816) }

var fileDescriptor_8571034d60397816 = []byte{
	// 276 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x51, 0x3d, 0x4f, 0x84, 0x40,
	0x10, 0x75, 0x3d, 0x45, 0x19, 0x41, 0x93, 0xf5, 0x23, 0xe4, 0x1a, 0x09, 0x15, 0xd5, 0xc5, 0x78,
	0x76, 0x16, 0x16, 0x16, 0xc6, 0xe2, 0x88, 0x41, 0x63, 0x65, 0xb3, 0x07, 0xab, 0xb7, 0x11, 0x67,
	0x0d, 0x0c, 0x31, 0xfe, 0x71, 0x6b, 0xc3, 0xee, 0xca, 0x71, 0x09, 0x76, 0xfb, 0x5e, 0xde, 0x9b,
	0x99, 0xf7, 0x16, 0x42, 0x94, 0xf4, 0xa5, 0xeb, 0xf7, 0xd9, 0x67, 0xad, 0x49, 0xf3, 0x3d, 0x07,
	0x93, 0x73, 0xf0, 0x17, 0x0a, 0x65, 0x7d, 0x8f, 0xaf, 0x9a, 0x73, 0xd8, 0x29, 0x05, 0x89, 0x88,
	0xc5, 0x2c, 0x0d, 0x72, 0xf3, 0xee, 0x04, 0xb7, 0x2b, 0xa1, 0xf0, 0x5f, 0x41, 0x02, 0xc1, 0x53,
	0x2d, 0xb0, 0x11, 0x05, 0x29, 0x8d, 0xcd, 0xa8, 0xe6, 0x05, 0x60, 0xa1, 0x50, 0xe1, 0x9b, 0x99,
	0x92, 0x40, 0x40, 0x03, 0x87, 0x53, 0x6e, 0x70, 0xfc, 0x04, 0x76, 0x51, 0x63, 0x21, 0xa3, 0xed,
	0x98, 0xa5, 0x93, 0xdc, 0x82, 0x8e, 0xfd, 0xe8, 0xae, 0x8d, 0x26, 0x31, 0x4b, 0xfd, 0xdc, 0x82,
	0x24, 0x06, 0x2f, 0x97, 0x4d, 0x5b, 0x11, 0x3f, 0x03, 0xaf, 0x21, 0x41, 0xad, 0x9d, 0xb9, 0x9f,
	0x3b, 0x74, 0xf9, 0xc3, 0xe0, 0x20, 0xd3, 0xa5, 0xcc, 0x6c, 0x6a, 0x3e, 0x07, 0xff, 0xf1, 0x1b,
	0x0b, 0x13, 0x8c, 0xf3, 0xd9, 0x5f, 0x37, 0x7d, 0x13, 0xd3, 0x35, 0xb7, 0x0e, 0x7f, 0x0d, 0x87,
	0x77, 0x92, 0x06, 0x59, 0x47, 0x9d, 0xa7, 0x3d, 0xb7, 0xd1, 0xca, 0x0d, 0x84, 0x0f, 0xed, 0xb2,
	0x52, 0xcd, 0xca, 0x9d, 0x7a, 0x3c, 0xf4, 0xba, 0x66, 0xa6, 0x63, 0x64, 0xb2, 0x95, 0xb2, 0x0b,
	0xc6, 0xaf, 0x20, 0x7c, 0x16, 0x95, 0x2a, 0x05, 0xc9, 0xcc, 0x74, 0x31, 0xb6, 0xfc, 0xa8, 0xe7,
	0xec, 0x96, 0xa5, 0x67, 0xbe, 0x7b, 0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x73, 0xe9, 0x1b, 0x8e,
	0xff, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NodeNetworkClient is the client API for NodeNetwork service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeNetworkClient interface {
	// blockchainを同期する
	SyncChain(ctx context.Context, in *MinerInfo, opts ...grpc.CallOption) (*ChainInfo, error)
	// トランザクションを取得する
	GetTransaction(ctx context.Context, in *MinerInfo, opts ...grpc.CallOption) (*Transactions, error)
	// 採掘結果を公開する
	PublishResult(ctx context.Context, opts ...grpc.CallOption) (NodeNetwork_PublishResultClient, error)
	// 検証結果を報告
	ValidateNonce(ctx context.Context, in *MinerInfo, opts ...grpc.CallOption) (*Result, error)
}

type nodeNetworkClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeNetworkClient(cc grpc.ClientConnInterface) NodeNetworkClient {
	return &nodeNetworkClient{cc}
}

func (c *nodeNetworkClient) SyncChain(ctx context.Context, in *MinerInfo, opts ...grpc.CallOption) (*ChainInfo, error) {
	out := new(ChainInfo)
	err := c.cc.Invoke(ctx, "/network.NodeNetwork/SyncChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeNetworkClient) GetTransaction(ctx context.Context, in *MinerInfo, opts ...grpc.CallOption) (*Transactions, error) {
	out := new(Transactions)
	err := c.cc.Invoke(ctx, "/network.NodeNetwork/GetTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeNetworkClient) PublishResult(ctx context.Context, opts ...grpc.CallOption) (NodeNetwork_PublishResultClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NodeNetwork_serviceDesc.Streams[0], "/network.NodeNetwork/PublishResult", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeNetworkPublishResultClient{stream}
	return x, nil
}

type NodeNetwork_PublishResultClient interface {
	Send(*MiningInfo) error
	Recv() (*MiningInfo, error)
	grpc.ClientStream
}

type nodeNetworkPublishResultClient struct {
	grpc.ClientStream
}

func (x *nodeNetworkPublishResultClient) Send(m *MiningInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nodeNetworkPublishResultClient) Recv() (*MiningInfo, error) {
	m := new(MiningInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeNetworkClient) ValidateNonce(ctx context.Context, in *MinerInfo, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/network.NodeNetwork/ValidateNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeNetworkServer is the server API for NodeNetwork service.
type NodeNetworkServer interface {
	// blockchainを同期する
	SyncChain(context.Context, *MinerInfo) (*ChainInfo, error)
	// トランザクションを取得する
	GetTransaction(context.Context, *MinerInfo) (*Transactions, error)
	// 採掘結果を公開する
	PublishResult(NodeNetwork_PublishResultServer) error
	// 検証結果を報告
	ValidateNonce(context.Context, *MinerInfo) (*Result, error)
}

// UnimplementedNodeNetworkServer can be embedded to have forward compatible implementations.
type UnimplementedNodeNetworkServer struct {
}

func (*UnimplementedNodeNetworkServer) SyncChain(ctx context.Context, req *MinerInfo) (*ChainInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncChain not implemented")
}
func (*UnimplementedNodeNetworkServer) GetTransaction(ctx context.Context, req *MinerInfo) (*Transactions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}
func (*UnimplementedNodeNetworkServer) PublishResult(srv NodeNetwork_PublishResultServer) error {
	return status.Errorf(codes.Unimplemented, "method PublishResult not implemented")
}
func (*UnimplementedNodeNetworkServer) ValidateNonce(ctx context.Context, req *MinerInfo) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateNonce not implemented")
}

func RegisterNodeNetworkServer(s *grpc.Server, srv NodeNetworkServer) {
	s.RegisterService(&_NodeNetwork_serviceDesc, srv)
}

func _NodeNetwork_SyncChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MinerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeNetworkServer).SyncChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NodeNetwork/SyncChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeNetworkServer).SyncChain(ctx, req.(*MinerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeNetwork_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MinerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeNetworkServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NodeNetwork/GetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeNetworkServer).GetTransaction(ctx, req.(*MinerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeNetwork_PublishResult_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NodeNetworkServer).PublishResult(&nodeNetworkPublishResultServer{stream})
}

type NodeNetwork_PublishResultServer interface {
	Send(*MiningInfo) error
	Recv() (*MiningInfo, error)
	grpc.ServerStream
}

type nodeNetworkPublishResultServer struct {
	grpc.ServerStream
}

func (x *nodeNetworkPublishResultServer) Send(m *MiningInfo) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nodeNetworkPublishResultServer) Recv() (*MiningInfo, error) {
	m := new(MiningInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _NodeNetwork_ValidateNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MinerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeNetworkServer).ValidateNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NodeNetwork/ValidateNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeNetworkServer).ValidateNonce(ctx, req.(*MinerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeNetwork_serviceDesc = grpc.ServiceDesc{
	ServiceName: "network.NodeNetwork",
	HandlerType: (*NodeNetworkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncChain",
			Handler:    _NodeNetwork_SyncChain_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _NodeNetwork_GetTransaction_Handler,
		},
		{
			MethodName: "ValidateNonce",
			Handler:    _NodeNetwork_ValidateNonce_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PublishResult",
			Handler:       _NodeNetwork_PublishResult_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "network.proto",
}
